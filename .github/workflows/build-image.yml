name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  
  build:
    name: Build Image    
    runs-on: ubuntu-latest
    env:
      REGISTRY: quay.io/troyer
      IMAGE_NAME: mlflow-server
      TAGS: v1 ${{ github.sha }}
      
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Setup S2i and Build container image
      - name: Setup and Build
        id: build_image
        uses: redhat-actions/s2i-build@v2
        with:
          path_context: 'mlflow-server'
          # Builder image for a java project
          builder_image: 'registry.access.redhat.com/ubi8/python-39:latest'
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.TAGS }}

      # Push Image to Quay registry
      - name: Push To Quay Action
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

  tag:

    name: Tag Image  
    runs-on: ubuntu-latest
    needs: build
    env:
      REGISTRY: quay.io/troyer
      IMAGE_NAME: mlflow-server
    
    steps:
      - name: Checkout 
        uses: actions/checkout@v2 # Required to mount the Github Workspace to a volume 
        
      - name: Retrieve version
        uses: addnab/docker-run-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          run: |
            echo "::set-output name=FULL_VERSION::$(pip show mlflow | grep -i version | awk '{print $2}')"
        id: version-test

      - name: Full Version
        run: echo "${{ steps.version-test.outputs.FULL_VERSION }}"

      - name: Retrieve version
        uses: addnab/docker-run-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          run: |
            FULL_VERSION=$(pip show mlflow | grep -i version | awk '{print $2}')
            major=`echo $FULL_VERSION | cut -d. -f1`
            minor=`echo $FULL_VERSION | cut -d. -f2`
            revision=`echo $FULL_VERSION | cut -d. -f3`
            MINOR_VERSION=$(echo "$major.$minor")
            echo "::set-output name=FULL_VERSION::${FULL_VERSION}"
            echo "::set-output name=MINOR_VERSION::${MINOR_VERSION}"
        id: version

      - name: Full Version
        run: echo "${{ steps.version.outputs.FULL_VERSION }}"

      - name: Minor Version
        run: echo "${{ steps.version.outputs.MINOR_VERSION }}"
